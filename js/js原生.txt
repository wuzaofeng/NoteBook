对象：
querySelector() 方法   //http://www.runoob.com/jsref/met-document-queryselector.html
方法返回文档中匹配指定 CSS 选择器的一个元素。
注意： querySelector() 方法仅仅返回匹配指定选择器的第一个元素。如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代。

hasOwnProperty()   判断是否属于自己身上的属性
如果判断自己原型链上的用 _proto_.hasOwnProperty()


defineProperties定义多个属性
Object.defineProperty(obj,'price',{enumerable:false,value:1000})

writable 是否可写入 默认false
configurable是否可修改    默认false
enumerable是否可枚举    默认false
propertyIsEnumerable()


深入浅出
  一.数据类型
     1. 基本,原始,原型类型    number string boolean null undefined
	对象   Object
     2. 隐式类型转换。巧妙利用+/-符号。
	 num - 0 隐式转换成 number类型   如 "37" - 7 // 30
	 num + ''隐式转换成 string类型   如 "37" + 7 // 377
	
         "1.23" == 1.23   字符串转换成数字进行比较
             0  == false
           null == undefined
    new Object()== new Object()
           [1,2]== [1,2]

     3.包装对象  
       原型类型里面的number,string,Boolean类型具有包装对象
       例如  var str ="string"与var strObj = new String("string")不同，是因为
       前者是先创建出一个String对象之后，会默默的删除掉这对象，后者不会

     4.类型检测
       typeof 函数对象，基本类型判断   特殊： typeof NaN  =>  "number"
					      typeof null =>  "object"
       instanceof  判断对象类型   基于原型链去判断  不同window或者iframe 之前对象类型检测不能用instanceof 

      Object.prototype.toString.apple(需要判断的对象)  
	 [] => "[object Array]"
	 null => "[object Null]" 在IE678会返回[object object]其他不会

严格模式
'use strict'
区别  	1.不允许用with
	2.不允许未声明变量被赋值
	3.arguments 变为参数的静态副本
          普通模式下参数不传会undefined
	4.delete参数，函数名报错
	5.禁止八进制字面量
	6.eval,arguments 变为关键字



序列化
JSON.syringify(obj) 转成字符串
JSON.parse(obj)     转成对象
       	

     


<-------------------------------------------------->
数组
增删
push()  尾部添加  pop() 尾部移除

unshift() 头部添加 shift()  头部移除

运用for-in语句会遍历原型链上的属性
for(i in arr){
   if(arr.hasOwnProperty(i)){ //过滤原型链上的属性
	console.log(arr[i])
}
}
1.join() 数组转为字符串   
2.reverse() 数组逆序   注： 会影响到原来数组
3.sort   数组排序    注： 会影响到原来数组
注：通常用字符串来排序，如果要用数字排序需要传入个函数
按数字从小到大排列
arr.sort(function(a,b){  return a-b; })
按数字从大到小排列
arr.sort(function(a,b){  return b-a; })

4.concat  数组合并   
5.slice 返回数组片段
用slice  可删除，可截取，可添加

6.forEach(x,index) 数组遍历  IE678不兼容

7.map()  数组映射 映射出一个不一样的数组
例如
 var arr = [1,2,3]
 arr.map(function(x){
   return x + 10
}) //[11,12,13]
arr; //[1,2,3]

8.every() & some() 数组判断
every() 所有的值是否符合
some()  只要一个值符合就返回true
 
9.filer() 数组过滤  过滤原有数组里面的值
var arr = [1, 2, 3, 4, 5]
arr.filter(function (x, index) {
  console.log(x) //  1, 2, 3, 4, 5
  console.log(index) // 0,1, 2, 3, 4
  return x < 5
})  //1, 2
arr; // [1, 2, 3, 4, 5]

10.reduce() & reduceRight() 数组里面俩俩比较   
var sum = arr.reduce(function (x, y) {  
  console.log(x);  // 0，2，5   每次运算返回的结果，如果有第二个参数则先传入第二个参数与第一个比较
  console.log(y);  // 2，3，4
  return x + y
},0)
console.log(sum) // 9
console.log(arr) //[2,3,4]

11.indexof() & lastIndexOf  数组检索 返回数组的位置  如果找不到则返回-1

12.Array.isArray()    判断是否为数组


函数执行顺序
1.函数参数（若未传入，初始化该参数值为undefined）
2.函数声明（若发生冲突，会覆盖）
3.变量声明（初始化变量值为undefined,若发送命名冲突，会忽略）       